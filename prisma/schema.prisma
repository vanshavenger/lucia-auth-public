generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                   @id @default(cuid())
  username          String?                  @unique
  email             String?                  @unique
  emailVerified     Boolean                  @default(false)
  hashedPassword    String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  imageUrl          String?
  displayName       String?
  role              role                     @default(USER)
  magicLinks        MagicLink[]
  oauthAccounts     OAuthAccount[]
  sessions          Session[]
  VerificationEmail VerificationEmail[]
  twoFactorAuth     TwoFactorAuthentication?
  passwordReset     PasswordResetToken?

  @@map("user")
}

enum role {
  USER
  ADMIN
}

enum provideType {
  GOOGLE
  DISCORD
  GITHUB
}

model OAuthAccount {
  id             String      @id @default(cuid())
  userId         String
  provider       provideType
  providerUserId String
  accessToken    String
  refreshToken   String?
  expiresAt      DateTime?
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([provider, providerUserId])
  @@map("oauth_account")
}

model VerificationEmail {
  id        String   @id @default(cuid())
  userId    String
  code      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("verification_email")
}

model TwoFactorAuthentication {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("two_factor_authentication")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model MagicLink {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("magic_link")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_reset_token")
}
